1. 浅拷贝 (Shallow Copy)
浅拷贝就像是复制了书页上的地址。现在你有两本书，但这两本书的书页上写的是同一个地址。
你的书： 书页上有地址 -> 指向 仓库 (重要的物品)
拷贝的书 (浅拷贝)： 书页上有地址 -> 也指向 同一个 仓库 (重要的物品)
这样做的问题是什么呢？
如果你的书因为某种原因被处理掉了（比如你把书丢进了碎纸机），而处理书的时候顺便把书页上的地址对应的仓库也清空了（这就像程序中对象析构时释放内存）。
你的书没了。
仓库被清空了。
现在你拿起那本“拷贝的书”，它的书页上还是写着那个地址，但这个地址指向的仓库已经空了！你去访问这个地址就会出问题，就像要去一个已经被拆掉的房子里拿东西一样，非常危险（在程序里就是悬空指针，访问会导致崩溃）。
2. 深拷贝 (Deep Copy)
深拷贝就像是：你不仅复制了书页上的地址，你还去了那个仓库，把里面的所有物品都复制了一份，然后找了一个新的仓库存放这些复制品，最后在你的“拷贝的书”的书页上写上新仓库的地址。
你的书： 书页上有地址 A -> 指向 仓库 A (重要的物品 原件)
拷贝的书 (深拷贝)： 你去了仓库 A，复制物品，找到新仓库 B，存放物品复制品。书页上写上地址 B -> 指向 仓库 B (重要的物品 复制品)
这样做的好处是什么呢？
现在你有两本书，分别指向两个不同的仓库。
如果你的书被处理掉了，并且仓库 A 被清空，没关系！
“拷贝的书”依然指向仓库 B，仓库 B 里的物品（复制品）完好无损。你可以安全地使用“拷贝的书”去访问仓库 B。